@import 'variables';

@keyframes empty {
	
}
@keyframes press {
	from {
		transform: scale(1);
	}
	to {
		transform: scale(0.75);
	}
}
@keyframes release {
	from {
		transform: scale(0.75);
	}
	to {
		transform: scale(1);
	}
}
@keyframes push {
	0% {
		transform: scale(1);
	}
	33% {
		transform: scale(0.75);
	}
	100% {
		transform: scale(1);
	}
}
svg {
  fill: $text-color;
  stroke: $text-color;
  stroke-width: 4px;
  stroke-linejoin: round;
  stroke-linecap: round;
  width: 100%;
  max-height: 100%;
	transform: scale(1);
  
  &, & * {
    transition: $transition;
  }
}

button {
  font-size: 1rem;
  font-weight: bold;
  
  flex: 1;
  
  color: $text-color;
  
  height: $button-size;
  min-width: $button-size;
  
  padding: 0;
  margin: 0 ($button-padding / 2);
  
  border-radius: $border-radius;
  border: $button-border;
  
  background: $button-color;
  
  -webkit-appearance: none;
  -moz-appearance: none;
  
  transition: $transition;
  
  outline: none;
  
  @media (orientation: landscape) and (max-width: 50rem) {
    width: $button-size;
    min-height: $button-size;
    
    margin: ($button-padding / 2) 0;
  }
  	
  &:hover svg {
    fill: $text-color;
    stroke: $text-color;
  }	
	
	&.pressed {
		svg {
			animation: press 150ms cubic-bezier(0.23, 1, 0.32, 1);
			animation-fill-mode: forwards;
//			transform: scale(0.75);
		}
	}
	&:not(.pressed) {
		svg {
			animation: release 300ms cubic-bezier(0.23, 1, 0.32, 1)
		}
	}
  &.active, &.active:hover {
    background: $button-active-color;
    border: 1px solid $button-active-color;
    svg {
      fill: $text-color;
      stroke: $text-color;
    }
  }
	
	&.ng-hide.ng-hide-add,//:not(.ng-hide-add-active),
	&.ng-hide.ng-hide-remove:not(.ng-hide-remove-active) {
		display: block !important;
		margin: 0;
		border-left: 0;
		border-right: 0;
		flex: 0.00001;
		min-width: 0;
		svg {
			transition: $transition;
			width: 0;
			opacity: 0;
		}
	}
  
  &.group {
    border-radius: 0;
    margin: 0;
    &.first {
      @media (orientation: portrait), (min-width: 50rem) {
        margin-left: $button-padding / 2;
        
        border-top-left-radius: $border-radius;
        border-bottom-left-radius: $border-radius;
      }
      
      @media (orientation: landscape) and (max-width: 50rem) {
        margin-top: $button-padding / 2;
        
        border-top-left-radius: $border-radius;
        border-top-right-radius: $border-radius;
      }
    }
    &.last {
      @media (orientation: portrait), (min-width: 50rem) {
        margin-right: $button-padding / 2;
        
        border-top-right-radius: $border-radius;
        border-bottom-right-radius: $border-radius;
      }
      
      @media (orientation: landscape) and (max-width: 50rem) {
        margin-bottom: $button-padding / 2;
        
        border-bottom-right-radius: $border-radius;
        border-bottom-left-radius: $border-radius;
      }
    }
  }
  		
  &:hover {
    background: $button-highlight-color;
    cursor: pointer;
  }
  
	&.close {
		background: transparent;
		border: none;
		flex: 0;
	}
	
  &.accent {
    background: $accent-color;
    border: 1px solid $accent-highlight-color;
    svg {
      fill: $text-color;
    }
    
    &:hover {
      background: $accent-highlight-color;
    }
  }
}