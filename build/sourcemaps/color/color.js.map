{"version":3,"file":"color/color.js","names":[],"mappings":"","sources":["color/color.js"],"sourcesContent":["/* jshint bitwise: false */\n\nangular.module('bndry.color', ['ngStorage'])\n\n/*\nColor Service\n \nConverts color notations to various formats\nSupported formats: rgba, hsla, hex24, hex32\n*/\n.service('ColorSvc', function($localStorage) {\n  var _rgba = {};\n  var self = this;\n\n  function rgbaToInt(r, g, b, a) {\n    r = Math.round(r * 255);\n    g = Math.round(g * 255);\n    b = Math.round(b * 255);\n    a = Math.round(a * 255);\n\n    /*\n    Bitwise black magic (given r = 0x12, g = 0x34, b = 56, a = 78):\n    (r << 24) => 0x12000000\n    (g << 16) => 0x00340000\n    (b << 8)  => 0x00005600\n    (a)       => 0x00000078\n    \n    All OR'ed => 0x12345678\n    \n    `>>> 0` converts to unsigned 32-bit int\n    */\n    return ((r << 24) | (g << 16) | (b << 8) | (a)) >>> 0;\n  }\n  function hueToRgb(p, q, t) {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1/6) return p + (q - p) * 6 * t;\n    if (t < 1/2) return q;\n    if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n    return p;\n  }\n  \n  this.convert = {\n    rgba: function(rgba) {\n      _rgba = rgbaToInt(rgba.r,\n        rgba.g,\n        rgba.b,\n        rgba.a);\n\n      return self;\n    },\n    hsla: function(hsla) {\n      var r, g, b;\n      var {h, s, l, a} = hsla;\n\n      if (s == 0) {\n          r = g = b = l; // achromatic\n      } else {\n          var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n          var p = 2 * l - q;\n          r = hueToRgb(p, q, h + 1/3);\n          g = hueToRgb(p, q, h);\n          b = hueToRgb(p, q, h - 1/3);\n      }\n      \n      _rgba = rgbaToInt(r, g, b, a);\n      \n      return self;\n    },\n    hex24: function(hex24) {\n      self.convert.hex32(hex24 + 'FF');\n\n      return self;\n    },\n    hex32: function(hex32) {\n      _rgba = parseInt(hex32, 16) >>> 0; // `>>> 0` => unsigned 32-bit int\n\n      return self;\n    }\n  };\n  this.to = {\n    rgba: function() {\n      var r = (_rgba >> 24 & 0xFF) / 0xFF,\n        g = (_rgba >> 16 & 0xFF) / 0xFF,\n        b = (_rgba >> 8 & 0xFF) / 0xFF,\n        a = (_rgba & 0xFF) / 0xFF;\n\n      _rgba = 0;\n\n      return {r,g,b,a};\n    },\n    hsla: function() {\n      var {r, g, b, a} = self.to.rgba();\n      \n      var max = Math.max(r, g, b), min = Math.min(r, g, b);\n      var h, s, l = (max + min) / 2;\n\n      if (max === min) {\n        h = s = 0; // achromatic\n      } else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n          case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n          case g: h = (b - r) / d + 2; break;\n          case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n      }\n\n      return {h, s, l, a};\n    },\n    hex24: function() {\n      return self.to.hex32().substring(0, 6);\n    },\n    hex32: function() {\n      var hex = _rgba.toString(16);\n      _rgba = 0;\n\n      return ('00000000' + hex).slice(-8); // Pad output with leading zero\n    }\n  };\n  \n  // HOTFIX until proper interface arrives\n  delete $localStorage.colors;\n  \n  $localStorage.$default({\n    colors: [{\n      name: 'Red',\n      label: 'Do not work either side',\n      r: 1,\n      g: 0,\n      b: 0,\n      a: 0.125,\n      weight: 10\n    }, {\n      name: 'Green',\n      label: 'Work ONLY the inner side',\n      r: 0,\n      g: 1,\n      b: 0,\n      a: 0.125,\n      weight: 10\n    }, {\n      name: 'Blue',\n      label: 'Work both sides',\n      r: 0,\n      g: 0,\n      b: 1,\n      a: 0.125,\n      weight: 10\n    }],\n    activeColorIndex: 1\n  });\n  self.colors = $localStorage.colors;\n  self.activeColorIndex = () => $localStorage.activeColorIndex;\n  self.setActiveColorIndex = function(index) {\n    $localStorage.activeColorIndex = index;\n  }\n  self.activeColor = function() {\n    return self.colors[self.activeColorIndex()];\n  };\n})\n  .controller('ColorCtrl', function($scope, $localStorage, ColorSvc) {\n    $scope.$storage = $localStorage;\n    \n    $scope.fillColor = function(index) {\n      if (index === undefined) {\n        index = ColorSvc.activeColorIndex;\n      }\n      var color = ColorSvc.colors[index];\n      return '#' + ColorSvc.convert.rgba(color).to.hex24();\n    };\n    $scope.activeColorIndex = ColorSvc.activeColorIndex;\n    $scope.setActiveColorIndex = ColorSvc.setActiveColorIndex;\n  });\n"],"sourceRoot":"/source/"}