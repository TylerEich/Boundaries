{"version":3,"file":"image/image.js","names":[],"mappings":"","sources":["image/image.js"],"sourcesContent":["angular.module('bndry.image', ['ngStorage', 'bndry.map', 'bndry.drawing', 'bndry.color'])\n  .service('ImageSvc', function($http, $document, $localStorage, MapSvc, DrawingSvc, ColorSvc) {\n    var self = this;\n    \n    self.pxSize = function(maxWidth, maxHeight) {\n      // var ratio = $localStorage.width / $localStorage.height;\n      var ratio = 3.5 / 5;\n      return {\n        ratio: ratio,\n        width: (ratio >= 1) ? maxWidth : Math.round(ratio * maxWidth),\n        height: (ratio < 1) ? maxHeight : Math.round(1 / ratio * maxHeight)\n      };\n    };\n    self.generateUrl = function() {\n      if (!DrawingSvc.drawings) {\n        return;\n      }\n\n      var path = 'https://maps.googleapis.com/maps/api/staticmap';\n\n      var params = [];\n\n      var pxSize = self.pxSize(640, 640);\n\n      // Generate style from map styling and drawings\n      var i, j;\n      var rule, urlRule, styler, key, value;\n      for (i = 0; i < $localStorage.style.length; i++) {\n        rule = $localStorage.style[i];\n        urlRule = [];\n\n        // Add selectors to urlRule\n        if ('featureType' in rule && rule.featureType !== 'all') {\n          urlRule.push('feature:' + rule.featureType);\n        }\n        if ('elementType' in rule && rule.elementType !== 'all') {\n          urlRule.push('element:' + rule.elementType);\n        }\n\n        // Loop through every styler, add to urlRule\n        for (j = 0; j < rule.stylers.length; j++) {\n          styler = rule.stylers[j];\n\n          for (key in styler) {\n            value = styler[key];\n\n            if (key === 'color') {\n              value = '0x' + value.substring(1);\n            }\n\n            urlRule.push(key + ':' + value);\n          }\n        }\n\n        urlRule = urlRule.join('|');\n\n        // Add urlRule to params if not empty string\n        if (urlRule !== '') {\n          params.push('style=' + urlRule);\n        }\n      }\n\n      // Generate paths from drawings\n      var drawing, urlPath, polyPath, encodedPath, color, hex;\n      var bounds = new MapSvc.LatLngBounds();\n      for (i = 0; i < DrawingSvc.drawings.length; i++) {\n        urlPath = [];\n        drawing = DrawingSvc.drawings[i];\n        polyPath = drawing._poly.getPath().getArray();\n\n        for (j = 0; j < polyPath.length; j++) {\n          bounds.extend(polyPath[j]);\n        }\n\n        encodedPath = MapSvc.geometry.encoding.encodePath(polyPath);\n        color = $localStorage.colors[drawing.colorIndex];\n        debugger;\n        hex = '0x' + ColorSvc.convert.rgba(color).to.hex32();\n\n        // If drawing is polygon, use 'fillcolor'\n        if (drawing.polygon) {\n          urlPath.push('fillcolor:' + hex);\n        } else {\n          urlPath.push('color:' + hex);\n          urlPath.push('weight:' + color.weight);\n        }\n        urlPath.push('enc:' + encodedPath);\n\n        urlPath = urlPath.join('|');\n\n        // Add urlPath to params if not empty string\n        if (urlPath) {\n          params.push('path=' + urlPath);\n        }\n      }\n\n      var northEast = bounds.getNorthEast();\n      var southWest = bounds.getSouthWest();\n      var computeHeading = MapSvc.geometry.spherical.computeHeading;\n      var heading = Math.abs(computeHeading(northEast, southWest) + computeHeading(southWest, northEast)) / 2;\n\n      // Check orientation\n      if ((45 <= heading && heading < 135) === (pxSize.ratio >= 1)) {\n        // Landscape\n        params.push('size=' + pxSize.height + 'x' + pxSize.width);\n      } else {\n        // Portrait\n        params.push('size=' + pxSize.width + 'x' + pxSize.height);\n      }\n\n      params.push('format=jpg');\n      params.push('scale=2');\n      params.push('sensor=true');\n\n      return encodeURI(path + '?' + params.join('&'));\n    };\n    self.generatePdf = function(locality, number, imageUrl) {\n      if (!imageUrl) {\n        imageUrl = self.generateUrl();\n      }\n      console.info(imageUrl);\n      \n      var data = {\n        serif: true,\n        locality: locality,\n        notes: \"See attached form for Do Not Calls.\\nAdd new Do Not Calls as you find them.\",\n        legend: [],\n        number: number,\n        image: imageUrl\n      }\n      \n      // Ugly hack to force browser to download file\n      var form = document.createElement('form');\n      form.style = 'display: none;'\n      form.enctype = 'x-www-form-urlencoded';\n      form.action = 'http://boundariesapp.herokuapp.com/pdf';\n      form.method = 'POST';\n      \n      \n      var input = document.createElement('input');\n      input.name = 'json';\n      input.type = 'text';\n      input.value = angular.toJson(data);\n      \n      form.appendChild(input);\n      \n      document.body.appendChild(form);\n      form.submit();\n      document.body.removeChild(form);\n    }\n  })\n  .controller('ImageCtrl', function($scope, ImageSvc) {\n    $scope.locality = '';\n    $scope.number = '';\n    \n    $scope.downloadPdf = ImageSvc.generatePdf.bind(ImageSvc, $scope.locality, $scope.number);\n  });\n"],"sourceRoot":"/source/"}