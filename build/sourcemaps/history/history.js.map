{"version":3,"file":"history/history.js","names":[],"mappings":"","sources":["history/history.js"],"sourcesContent":["angular.module('bndry.history', [])\n  .service('HistorySvc', function() {\n    /* jshint quotmark:true */\n    /* jshint camelcase:false */\n      /*\n      Simple Javascript undo and redo.\n      https://github.com/ArthurClemens/Javascript-Undo-Manager\n      */\n      \"use strict\";\n\n      var commands = [],\n        index = -1,\n        isExecuting = false,\n        callback,\n\n        // functions\n        execute;\n\n      execute = function(command, action) {\n        if (!command || typeof command[action] !== \"function\") {\n          return this;\n        }\n        isExecuting = true;\n\n        command[action]();\n\n        isExecuting = false;\n        return this;\n      };\n\n      return {\n\n        /*\n        Add a command to the queue.\n        */\n        add: function(command) {\n          if (isExecuting) {\n            return this;\n          }\n          // if we are here after having called undo,\n          // invalidate items higher on the stack\n          commands.splice(index + 1, commands.length - index);\n\n          commands.push(command);\n\n          // set the current index to the end\n          index = commands.length - 1;\n          if (callback) {\n            callback();\n          }\n          return this;\n        },\n\n        /*\n        Pass a function to be called on undo and redo actions.\n        */\n        setCallback: function(callbackFunc) {\n          callback = callbackFunc;\n        },\n\n        /*\n        Perform undo: call the undo function at the current index and decrease the index by 1.\n        */\n        undo: function() {\n          var command = commands[index];\n          if (!command) {\n            return this;\n          }\n          execute(command, \"undo\");\n          index -= 1;\n          if (callback) {\n            callback();\n          }\n          return this;\n        },\n\n        /*\n        Perform redo: call the redo function at the next index and increase the index by 1.\n        */\n        redo: function() {\n          var command = commands[index + 1];\n          if (!command) {\n            return this;\n          }\n          execute(command, \"redo\");\n          index += 1;\n          if (callback) {\n            callback();\n          }\n          return this;\n        },\n\n        /*\n        Clears the memory, losing all stored states. Reset the index.\n        */\n        clear: function() {\n          var prev_size = commands.length;\n\n          commands = [];\n          index = -1;\n\n          if (callback && (prev_size > 0)) {\n            callback();\n          }\n        },\n\n        hasUndo: function() {\n          return index !== -1;\n        },\n\n        hasRedo: function() {\n          return index < (commands.length - 1);\n        },\n\n        getCommands: function() {\n          return commands;\n        }\n      };\n    });\n\n      /*\nLICENSE\n\nThe MIT License\n\nCopyright (c) 2010-2014 Arthur Clemens, arthurclemens@gmail.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions: \n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n"],"sourceRoot":"/source/"}