{"version":3,"file":"drawing/drawingSpec.js","names":[],"mappings":"","sources":["drawing/drawingSpec.js"],"sourcesContent":["describe('DrawingSvc ·', function() {\n  var $q,\n    $timeout,\n    DrawingSvc,\n    MapSvc,\n    MockDirectionsSvc,\n    drawing,\n    node0,\n    node1,\n    node2,\n    latLng;\n\n  MockDirectionsSvc = function() {\n    this.route = function(locations) {\n      var path = [], lat, lng;\n\n      path.push(locations[0]);\n      if (\n        !(locations[0].lat() === locations[1].lat() &&\n        locations[0].lng() === locations[1].lng())\n      ) {\n        for (var i = 0; i < 8; i++) {\n          lat = -90 + (180 * Math.random());\n          lng = -180 + (360 * Math.random());\n          path.push(new MapSvc.LatLng(lat, lng));\n        }\n        path.push(locations[1]);\n      }\n\n      return $q.when(path);\n    };\n  };\n\n  var MockMapSvc = MapSvc = {\n    '__gjsload__': function() {},\n    'Animation': {\n      'BOUNCE': 1,\n      'DROP': 2,\n      'k': 3,\n      'j': 4\n    },\n    'Circle': function() {},\n    'ControlPosition': {\n      'TOP_LEFT': 1,\n      'TOP_CENTER': 2,\n      'TOP': 2,\n      'TOP_RIGHT': 3,\n      'LEFT_CENTER': 4,\n      'LEFT_TOP': 5,\n      'LEFT': 5,\n      'LEFT_BOTTOM': 6,\n      'RIGHT_TOP': 7,\n      'RIGHT': 7,\n      'RIGHT_CENTER': 8,\n      'RIGHT_BOTTOM': 9,\n      'BOTTOM_LEFT': 10,\n      'BOTTOM_CENTER': 11,\n      'BOTTOM': 11,\n      'BOTTOM_RIGHT': 12,\n      'CENTER': 13\n    },\n    'Data': function() {},\n    'GroundOverlay': function() {},\n    'ImageMapType': function() {},\n    'InfoWindow': function() {},\n    'LatLng': function(lat, lng) {\n      this.lat = () => lat;\n      this.lng = () => lng;\n      this.equals = (latLng) => {\n        return (this.lat() === latLng.lat() &&\n          this.lng() === latLng.lng());\n      }\n    },\n    'LatLngBounds': function() {},\n    'MVCArray': function() {},\n    'MVCObject': function() {},\n    'Map': function() {},\n    'MapTypeControlStyle': {\n      'DEFAULT': 0,\n      'HORIZONTAL_BAR': 1,\n      'DROPDOWN_MENU': 2\n    },\n    'MapTypeId': {\n      'ROADMAP': 'roadmap',\n      'SATELLITE': 'satellite',\n      'HYBRID': 'hybrid',\n      'TERRAIN': 'terrain'\n    },\n    'MapTypeRegistry': function() {},\n    'Marker': function() {\n      this.setPosition = () => {};\n      this.setMap = () => {};\n    },\n    'MarkerImage': function() {},\n    'NavigationControlStyle': {\n      'DEFAULT': 0,\n      'SMALL': 1,\n      'ANDROID': 2,\n      'ZOOM_PAN': 3,\n      'Dn': 4,\n      'Xm': 5\n    },\n    'OverlayView': function() {},\n    'Point': function() {},\n    'Polygon': function() {\n      var path;\n      this.setPath = (polyPath) => {\n        path = polyPath;\n      }\n      this.getPath = () => {\n        return {\n          getArray: () => path\n        };\n      }\n    },\n    'Polyline': function() {\n      var path = [];\n      this.setPath = (polyPath) => {\n        path = polyPath;\n      }\n      this.getPath = () => {\n        return {\n          getArray: () => path\n        };\n      }\n    },\n    'Rectangle': function() {},\n    'ScaleControlStyle': {\n      'DEFAULT': 0\n    },\n    'Size': function() {},\n    'StrokePosition': {\n      'CENTER': 0,\n      'INSIDE': 1,\n      'OUTSIDE': 2\n    },\n    'SymbolPath': {\n      'CIRCLE': 0,\n      'FORWARD_CLOSED_ARROW': 1,\n      'FORWARD_OPEN_ARROW': 2,\n      'BACKWARD_CLOSED_ARROW': 3,\n      'BACKWARD_OPEN_ARROW': 4\n    },\n    'ZoomControlStyle': {\n      'DEFAULT': 0,\n      'SMALL': 1,\n      'LARGE': 2,\n      'Xm': 3\n    },\n    'event': {\n      'Re': false,\n      'Zd': {},\n      'addListener': function() {},\n      'yf': function() {},\n      'removeListener': function() {},\n      'clearListeners': function() {},\n      'clearInstanceListeners': function() {},\n      'trigger': function() {},\n      'addDomListener': function() {},\n      'addDomListenerOnce': function() {},\n      'ca': function() {},\n      'bind': function() {},\n      'addListenerOnce': function() {},\n      'forward': function() {},\n      'Ua': function() {},\n      'bi': function() {},\n      'Qj': function() {}\n    },\n    'BicyclingLayer': function() {},\n    'DirectionsRenderer': function() {},\n    'DirectionsService': function() {},\n    'DirectionsStatus': {\n      'OK': 'OK',\n      'UNKNOWN_ERROR': 'UNKNOWN_ERROR',\n      'OVER_QUERY_LIMIT': 'OVER_QUERY_LIMIT',\n      'REQUEST_DENIED': 'REQUEST_DENIED',\n      'INVALID_REQUEST': 'INVALID_REQUEST',\n      'ZERO_RESULTS': 'ZERO_RESULTS',\n      'MAX_WAYPOINTS_EXCEEDED': 'MAX_WAYPOINTS_EXCEEDED',\n      'NOT_FOUND': 'NOT_FOUND'\n    },\n    'DirectionsTravelMode': {\n      'DRIVING': 'DRIVING',\n      'WALKING': 'WALKING',\n      'BICYCLING': 'BICYCLING',\n      'TRANSIT': 'TRANSIT'\n    },\n    'DirectionsUnitSystem': {\n      'METRIC': 0,\n      'IMPERIAL': 1\n    },\n    'DistanceMatrixService': function() {},\n    'DistanceMatrixStatus': {\n      'OK': 'OK',\n      'INVALID_REQUEST': 'INVALID_REQUEST',\n      'OVER_QUERY_LIMIT': 'OVER_QUERY_LIMIT',\n      'REQUEST_DENIED': 'REQUEST_DENIED',\n      'UNKNOWN_ERROR': 'UNKNOWN_ERROR',\n      'MAX_ELEMENTS_EXCEEDED': 'MAX_ELEMENTS_EXCEEDED',\n      'MAX_DIMENSIONS_EXCEEDED': 'MAX_DIMENSIONS_EXCEEDED'\n    },\n    'DistanceMatrixElementStatus': {\n      'OK': 'OK',\n      'NOT_FOUND': 'NOT_FOUND',\n      'ZERO_RESULTS': 'ZERO_RESULTS'\n    },\n    'ElevationService': function() {},\n    'ElevationStatus': {\n      'OK': 'OK',\n      'UNKNOWN_ERROR': 'UNKNOWN_ERROR',\n      'OVER_QUERY_LIMIT': 'OVER_QUERY_LIMIT',\n      'REQUEST_DENIED': 'REQUEST_DENIED',\n      'INVALID_REQUEST': 'INVALID_REQUEST',\n      'Bn': 'DATA_NOT_AVAILABLE'\n    },\n    'FusionTablesLayer': function() {},\n    'Geocoder': function() {},\n    'GeocoderLocationType': {\n      'ROOFTOP': 'ROOFTOP',\n      'RANGE_INTERPOLATED': 'RANGE_INTERPOLATED',\n      'GEOMETRIC_CENTER': 'GEOMETRIC_CENTER',\n      'APPROXIMATE': 'APPROXIMATE'\n    },\n    'GeocoderStatus': {\n      'OK': 'OK',\n      'UNKNOWN_ERROR': 'UNKNOWN_ERROR',\n      'OVER_QUERY_LIMIT': 'OVER_QUERY_LIMIT',\n      'REQUEST_DENIED': 'REQUEST_DENIED',\n      'INVALID_REQUEST': 'INVALID_REQUEST',\n      'ZERO_RESULTS': 'ZERO_RESULTS',\n      'ERROR': 'ERROR'\n    },\n    'KmlLayer': function() {},\n    'KmlLayerStatus': {\n      'UNKNOWN': 'UNKNOWN',\n      'OK': 'OK',\n      'INVALID_REQUEST': 'INVALID_REQUEST',\n      'DOCUMENT_NOT_FOUND': 'DOCUMENT_NOT_FOUND',\n      'FETCH_ERROR': 'FETCH_ERROR',\n      'INVALID_DOCUMENT': 'INVALID_DOCUMENT',\n      'DOCUMENT_TOO_LARGE': 'DOCUMENT_TOO_LARGE',\n      'LIMITS_EXCEEDED': 'LIMITS_EXECEEDED',\n      'TIMED_OUT': 'TIMED_OUT'\n    },\n    'MaxZoomService': function() {},\n    'MaxZoomStatus': {\n      'OK': 'OK',\n      'ERROR': 'ERROR'\n    },\n    'StreetViewCoverageLayer': function() {},\n    'StreetViewPanorama': function() {},\n    'StreetViewService': function() {},\n    'StreetViewStatus': {\n      'OK': 'OK',\n      'UNKNOWN_ERROR': 'UNKNOWN_ERROR',\n      'ZERO_RESULTS': 'ZERO_RESULTS'\n    },\n    'StyledMapType': function() {},\n    'TrafficLayer': function() {},\n    'TransitLayer': function() {},\n    'TravelMode': {\n      'DRIVING': 'DRIVING',\n      'WALKING': 'WALKING',\n      'BICYCLING': 'BICYCLING',\n      'TRANSIT': 'TRANSIT'\n    },\n    'UnitSystem': {\n      'METRIC': 0,\n      'IMPERIAL': 1\n    },\n    'version': '3.16.8',\n    'map': {}\n  };\n\n  beforeEach(module('bndry.drawing', function($provide) {\n    $provide.value('DirectionsSvc', new MockDirectionsSvc());\n    $provide.value('MapSvc', MockMapSvc);\n  }));\n\n  beforeEach(inject(function(_$timeout_, _$q_) {\n    $q = _$q_;\n    $timeout = _$timeout_;\n  }));\n\n  beforeEach(inject(function(_DrawingSvc_) {\n    DrawingSvc = _DrawingSvc_;\n  }));\n\n  describe('Flexible paths ·', function() {\n    describe('Addition ·', function() {\n      it('Creates a path with a single point', function(done) {\n        drawing = DrawingSvc.makeDrawing(0, false);\n        var node = DrawingSvc.makeNode(0, new MapSvc.LatLng(0, 0));\n      \n        DrawingSvc.addNodeToDrawing(drawing, 0, node)\n          .then(function(path) {\n            expect(path.length).toBe(1);\n        \n            expect(node.index).toBe(0);\n            expect(path[0].lat()).toBe(node.lat);\n            expect(path[0].lng()).toBe(node.lng);\n          })\n          .finally(done);\n    \n        $timeout.flush();\n      });\n  \n  \n      it('Creates a path with multiple points', function(done) {\n        drawing = DrawingSvc.makeDrawing(0, false);\n        var node0 = DrawingSvc.makeNode(0, new MapSvc.LatLng(0, 0)),\n          node1 = DrawingSvc.makeNode(0, new MapSvc.LatLng(1, 1)),\n          node2 = DrawingSvc.makeNode(2, new MapSvc.LatLng(2, 2));\n      \n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1, node2])\n          .then(function(path) {\n            expect(path.length).toBe(19);\n        \n            expect(drawing.nodes[0]).toBe(node0);\n            expect(node0.index).toBe(0);\n            expect(path[0].lat()).toBe(node0.lat);\n            expect(path[0].lng()).toBe(node0.lng);\n            \n            expect(drawing.nodes[1]).toBe(node1);\n            expect(node1.index).toBe(9);\n            expect(path[9].lat()).toBe(node1.lat);\n            expect(path[9].lng()).toBe(node1.lng);\n            \n            expect(drawing.nodes[2]).toBe(node2);\n            expect(node2.index).toBe(18);\n            expect(path[18].lat()).toBe(node2.lat);\n            expect(path[18].lng()).toBe(node2.lng);\n          })\n          .finally(done);\n    \n        $timeout.flush();\n      });\n  \n  \n      it('Appends a path to a single point', function(done) {\n        drawing = DrawingSvc.makeDrawing(0, false);\n        var node0 = DrawingSvc.makeNode(0, new MapSvc.LatLng(0, 0)),\n          node1 = DrawingSvc.makeNode(0, new MapSvc.LatLng(1, 1));\n    \n        DrawingSvc.addNodeToDrawing(drawing, 0, node0)\n          .then(function() {\n            DrawingSvc.addNodeToDrawing(drawing, 1, node1)\n              .then(function(path) {\n                expect(path.length).toBe(10);\n            \n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n            \n                expect(node1.index).toBe(9);\n                expect(path[9].lat()).toBe(node1.lat);\n                expect(path[9].lng()).toBe(node1.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n  \n  \n      it('Appends a path to a path', function(done) {\n        drawing = DrawingSvc.makeDrawing(0, false);\n        var node0 = DrawingSvc.makeNode(0, new MapSvc.LatLng(0, 0)),\n          node1 = DrawingSvc.makeNode(0, new MapSvc.LatLng(1, 1)),\n          node2 = DrawingSvc.makeNode(0, new MapSvc.LatLng(2, 2));\n    \n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1])\n          .then(function() {\n            DrawingSvc.addNodeToDrawing(drawing, 2, node2)\n              .then(function(path) {\n                expect(path.length).toBe(19);\n            \n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n            \n                expect(node1.index).toBe(9);\n                expect(path[9].lat()).toBe(node1.lat);\n                expect(path[9].lng()).toBe(node1.lng);\n            \n                expect(node2.index).toBe(18);\n                expect(path[18].lat()).toBe(node2.lat);\n                expect(path[18].lng()).toBe(node2.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n\n\n      it('Inserts a path into a path', function(done) {\n        drawing = DrawingSvc.makeDrawing(0, false);\n        var node0 = DrawingSvc.makeNode(0, new MapSvc.LatLng(0, 0)),\n          node1 = DrawingSvc.makeNode(0, new MapSvc.LatLng(1, 1)),\n          node2 = DrawingSvc.makeNode(0, new MapSvc.LatLng(2, 2));\n    \n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1])\n          .then(function(path) {\n            DrawingSvc.addNodeToDrawing(drawing, 1, node2)\n              .then(function(path) {\n                expect(path.length).toBe(19);\n            \n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n            \n                expect(node1.index).toBe(18);\n                expect(path[18].lat()).toBe(node1.lat);\n                expect(path[18].lng()).toBe(node1.lng);\n            \n                expect(node2.index).toBe(9);\n                expect(path[9].lat()).toBe(node2.lat);\n                expect(path[9].lng()).toBe(node2.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n\n\n      it('Prepends a path to a single point', function(done) {\n        drawing = DrawingSvc.makeDrawing(0, false);\n        var node0 = DrawingSvc.makeNode(0, new MapSvc.LatLng(0, 0)),\n          node1 = DrawingSvc.makeNode(0, new MapSvc.LatLng(1, 1));\n    \n        DrawingSvc.addNodeToDrawing(drawing, 0, node0)\n          .then(function() {\n            DrawingSvc.addNodeToDrawing(drawing, 0, node1)\n              .then(function(path) {\n                expect(path.length).toBe(10);\n            \n                expect(node0.index).toBe(9);\n                expect(path[9].lat()).toBe(node0.lat);\n                expect(path[9].lng()).toBe(node0.lng);\n            \n                expect(node1.index).toBe(0);\n                expect(path[0].lat()).toBe(node1.lat);\n                expect(path[0].lng()).toBe(node1.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n  \n  \n      it('Prepends a path to a path', function(done) {\n        drawing = DrawingSvc.makeDrawing(0, false);\n        var node0 = DrawingSvc.makeNode(0, new MapSvc.LatLng(0, 0)),\n          node1 = DrawingSvc.makeNode(0, new MapSvc.LatLng(1, 1)),\n          node2 = DrawingSvc.makeNode(0, new MapSvc.LatLng(2, 2));\n    \n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1])\n          .then(function() {\n            DrawingSvc.addNodeToDrawing(drawing, 0, node2)\n              .then(function(path) {\n                expect(path.length).toBe(19);\n            \n                expect(node0.index).toBe(9);\n                expect(path[9].lat()).toBe(node0.lat);\n                expect(path[9].lng()).toBe(node0.lng);\n            \n                expect(node1.index).toBe(18);\n                expect(path[18].lat()).toBe(node1.lat);\n                expect(path[18].lng()).toBe(node1.lng);\n            \n                expect(node2.index).toBe(0);\n                expect(path[0].lat()).toBe(node2.lat);\n                expect(path[0].lng()).toBe(node2.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n    });\n    \n    describe('Change existing ·', function() {\n      it('Moves orphan node', function(done) {\n        drawing = DrawingSvc.makeDrawing(0, false);\n        var node0 = DrawingSvc.makeNode(0, new MapSvc.LatLng(0, 0)),\n          latLng = new MapSvc.LatLng(1, 1);\n    \n        DrawingSvc.addNodeToDrawing(drawing, 0, node0)\n          .then(function() {\n            DrawingSvc.changeNodeOfDrawing(drawing, 0, {\n              lat: latLng.lat(),\n              lng: latLng.lng()\n            })\n              .then(function(path) {\n                expect(path.length).toBe(1);\n            \n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n                expect(latLng.lat()).toBe(node0.lat);\n                expect(latLng.lng()).toBe(node0.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n    \n    \n      it('Moves last node', function(done) {\n        drawing = DrawingSvc.makeDrawing(0, false);\n        var node0 = DrawingSvc.makeNode(0, new MapSvc.LatLng(0, 0)),\n          node1 = DrawingSvc.makeNode(0, new MapSvc.LatLng(1, 1)),\n          node2 = DrawingSvc.makeNode(0, new MapSvc.LatLng(2, 2)),\n          latLng = new MapSvc.LatLng(3, 3);\n    \n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1, node2])\n          .then(function() {\n            DrawingSvc.changeNodeOfDrawing(drawing, 2, {\n              lat: latLng.lat(),\n              lng: latLng.lng()\n            })\n              .then(function(path) {\n                expect(path.length).toBe(19);\n            \n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n            \n                expect(node1.index).toBe(9);\n                expect(path[9].lat()).toBe(node1.lat);\n                expect(path[9].lng()).toBe(node1.lng);\n            \n                expect(drawing.nodes).not.toContain(node2);\n                node2 = drawing.nodes[2];\n                \n                expect(node2.index).toBe(18);\n                expect(path[18].lat()).toBe(node2.lat);\n                expect(path[18].lng()).toBe(node2.lng);\n                expect(latLng.lat()).toBe(node2.lat);\n                expect(latLng.lng()).toBe(node2.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n    \n    \n      it('Moves first node', function(done) {\n        drawing = DrawingSvc.makeDrawing(0, false);\n        var node0 = DrawingSvc.makeNode(0, new MapSvc.LatLng(0, 0)),\n          node1 = DrawingSvc.makeNode(0, new MapSvc.LatLng(1, 1)),\n          node2 = DrawingSvc.makeNode(0, new MapSvc.LatLng(2, 2)),\n          latLng = new MapSvc.LatLng(3, 3);\n    \n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1, node2])\n          .then(function() {\n            DrawingSvc.changeNodeOfDrawing(drawing, 0, {\n              lat: latLng.lat(),\n              lng: latLng.lng()\n            })\n              .then(function(path) {\n                expect(path.length).toBe(19);\n            \n                expect(drawing.nodes).not.toContain(node0);\n                node0 = drawing.nodes[0];\n                \n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n                expect(latLng.lat()).toBe(node0.lat);\n                expect(latLng.lng()).toBe(node0.lng);\n            \n                expect(node1.index).toBe(9);\n                expect(path[9].lat()).toBe(node1.lat);\n                expect(path[9].lng()).toBe(node1.lng);\n            \n                expect(node2.index).toBe(18);\n                expect(path[18].lat()).toBe(node2.lat);\n                expect(path[18].lng()).toBe(node2.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n\n\n      it('Moves middle node', function(done) {\n        drawing = DrawingSvc.makeDrawing(0, false);\n        var node0 = DrawingSvc.makeNode(0, new MapSvc.LatLng(0, 0)),\n          node1 = DrawingSvc.makeNode(0, new MapSvc.LatLng(1, 1)),\n          node2 = DrawingSvc.makeNode(0, new MapSvc.LatLng(2, 2)),\n          latLng = new MapSvc.LatLng(3, 3);\n          \n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1, node2])\n          .then(function(path) {\n            DrawingSvc.changeNodeOfDrawing(drawing, 1, {\n              lat: latLng.lat(),\n              lng: latLng.lng()\n            })\n              .then(function(path) {\n                expect(path.length).toBe(19);\n            \n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n            \n                expect(drawing.nodes).not.toContain(node1);\n                \n                node1 = drawing.nodes[1];\n                expect(node1.index).toBe(9);\n                expect(path[9].lat()).toBe(node1.lat);\n                expect(path[9].lng()).toBe(node1.lng);\n                expect(latLng.lat()).toBe(node1.lat);\n                expect(latLng.lng()).toBe(node1.lng);\n            \n                expect(node2.index).toBe(18);\n                expect(path[18].lat()).toBe(node2.lat);\n                expect(path[18].lng()).toBe(node2.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n    });\n    \n    describe('Removal ·', function() {\n      it('Removes orphan node', function(done) {\n        drawing = DrawingSvc.makeDrawing(0, false);\n        var node0 = DrawingSvc.makeNode(0, new MapSvc.LatLng(0, 0)),\n          latLng = new MapSvc.LatLng(1, 1);\n    \n        DrawingSvc.addNodeToDrawing(drawing, 0, node0)\n          .then(function() {\n            DrawingSvc.removeNodeFromDrawing(drawing, 0, 1)\n              .then(function(path) {\n                expect(path.length).toBe(0);\n                expect(drawing.nodes.length).toBe(0);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n    \n    \n      it('Removes last node', function(done) {\n        drawing = DrawingSvc.makeDrawing(0, false);\n        var node0 = DrawingSvc.makeNode(0, new MapSvc.LatLng(0, 0)),\n          node1 = DrawingSvc.makeNode(0, new MapSvc.LatLng(1, 1)),\n          node2 = DrawingSvc.makeNode(0, new MapSvc.LatLng(2, 2));\n    \n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1, node2])\n          .then(function() {\n            DrawingSvc.removeNodeFromDrawing(drawing, 2, 1)\n              .then(function(path) {\n                expect(path.length).toBe(10);\n            \n                expect(drawing.nodes.length).toBe(2);\n                \n                expect(drawing.nodes[0]).toBe(node0);\n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n            \n                expect(drawing.nodes[1]).toBe(node1);\n                expect(node1.index).toBe(9);\n                expect(path[9].lat()).toBe(node1.lat);\n                expect(path[9].lng()).toBe(node1.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n    \n    \n      it('Removes first node', function(done) {\n        drawing = DrawingSvc.makeDrawing(0, false);\n        var node0 = DrawingSvc.makeNode(0, new MapSvc.LatLng(0, 0)),\n          node1 = DrawingSvc.makeNode(0, new MapSvc.LatLng(1, 1)),\n          node2 = DrawingSvc.makeNode(0, new MapSvc.LatLng(2, 2));\n    \n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1, node2])\n          .then(function() {\n            DrawingSvc.removeNodeFromDrawing(drawing, 0, 1)\n              .then(function(path) {\n                expect(path.length).toBe(10);\n            \n                expect(drawing.nodes.length).toBe(2);\n                \n                expect(drawing.nodes[0]).toBe(node1);\n                expect(node1.index).toBe(0);\n                expect(path[0].lat()).toBe(node1.lat);\n                expect(path[0].lng()).toBe(node1.lng);\n            \n                expect(drawing.nodes[1]).toBe(node2);\n                expect(node2.index).toBe(9);\n                expect(path[9].lat()).toBe(node2.lat);\n                expect(path[9].lng()).toBe(node2.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n\n\n      it('Removes middle node', function(done) {\n        drawing = DrawingSvc.makeDrawing(0, false);\n        var node0 = DrawingSvc.makeNode(0, new MapSvc.LatLng(0, 0)),\n          node1 = DrawingSvc.makeNode(0, new MapSvc.LatLng(1, 1)),\n          node2 = DrawingSvc.makeNode(0, new MapSvc.LatLng(2, 2));\n                \n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1, node2])\n          .then(function(path) {\n            DrawingSvc.removeNodeFromDrawing(drawing, 1, 1)\n              .then(function(path) {\n                expect(path.length).toBe(10);\n            \n                expect(drawing.nodes.length).toBe(2);\n                \n                expect(drawing.nodes[0]).toBe(node0);\n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n            \n                expect(drawing.nodes[1]).toBe(node2);\n                expect(node2.index).toBe(9);\n                expect(path[9].lat()).toBe(node2.lat);\n                expect(path[9].lng()).toBe(node2.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n    });\n  });\n  \n  \n  describe('Rigid paths ·', function() {\n    beforeEach(() => {\n      drawing = DrawingSvc.makeDrawing(0, true);\n      node0 = DrawingSvc.makeNode(0, new MapSvc.LatLng(0, 0));\n      node1 = DrawingSvc.makeNode(0, new MapSvc.LatLng(1, 1));\n      node2 = DrawingSvc.makeNode(0, new MapSvc.LatLng(2, 2));\n      latLng = new MapSvc.LatLng(3, 3);\n    })\n    describe('Addition ·', function() {\n      it('Creates a path with a single point', function(done) {\n        DrawingSvc.addNodeToDrawing(drawing, 0, node0)\n          .then(function(path) {\n            expect(path.length).toBe(1);\n        \n            expect(node0.index).toBe(0);\n            expect(path[0].lat()).toBe(node0.lat);\n            expect(path[0].lng()).toBe(node0.lng);\n          })\n          .finally(done);\n    \n        $timeout.flush();\n      });\n  \n  \n      it('Creates a path with multiple points', function(done) {\n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1, node2])\n          .then(function(path) {\n            expect(path.length).toBe(3);\n        \n            expect(node0.index).toBe(0);\n            expect(path[0].lat()).toBe(node0.lat);\n            expect(path[0].lng()).toBe(node0.lng);\n            \n            expect(node1.index).toBe(1);\n            expect(path[1].lat()).toBe(node1.lat);\n            expect(path[1].lng()).toBe(node1.lng);\n            \n            expect(node2.index).toBe(2);\n            expect(path[2].lat()).toBe(node2.lat);\n            expect(path[2].lng()).toBe(node2.lng);\n          })\n          .finally(done);\n    \n        $timeout.flush();\n      });\n  \n  \n      it('Appends a path to a single point', function(done) {\n        DrawingSvc.addNodeToDrawing(drawing, 0, node0)\n          .then(function() {\n            DrawingSvc.addNodeToDrawing(drawing, 1, node1)\n              .then(function(path) {\n                expect(path.length).toBe(2);\n            \n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n            \n                expect(node1.index).toBe(1);\n                expect(path[1].lat()).toBe(node1.lat);\n                expect(path[1].lng()).toBe(node1.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n  \n  \n      it('Appends a path to a path', function(done) {\n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1])\n          .then(function() {\n            DrawingSvc.addNodeToDrawing(drawing, 2, node2)\n              .then(function(path) {\n                expect(path.length).toBe(3);\n            \n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n            \n                expect(node1.index).toBe(1);\n                expect(path[1].lat()).toBe(node1.lat);\n                expect(path[1].lng()).toBe(node1.lng);\n            \n                expect(node2.index).toBe(2);\n                expect(path[2].lat()).toBe(node2.lat);\n                expect(path[2].lng()).toBe(node2.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n\n\n      it('Inserts a path into a path', function(done) {\n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1])\n          .then(function(path) {\n            DrawingSvc.addNodeToDrawing(drawing, 1, node2)\n              .then(function(path) {\n                expect(path.length).toBe(3);\n            \n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n            \n                expect(node1.index).toBe(2);\n                expect(path[2].lat()).toBe(node1.lat);\n                expect(path[2].lng()).toBe(node1.lng);\n            \n                expect(node2.index).toBe(1);\n                expect(path[1].lat()).toBe(node2.lat);\n                expect(path[1].lng()).toBe(node2.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n\n\n      it('Prepends a path to a single point', function(done) {\n        DrawingSvc.addNodeToDrawing(drawing, 0, node0)\n          .then(function() {\n            DrawingSvc.addNodeToDrawing(drawing, 0, node1)\n              .then(function(path) {\n                expect(path.length).toBe(2);\n            \n                expect(node0.index).toBe(1);\n                expect(path[1].lat()).toBe(node0.lat);\n                expect(path[1].lng()).toBe(node0.lng);\n            \n                expect(node1.index).toBe(0);\n                expect(path[0].lat()).toBe(node1.lat);\n                expect(path[0].lng()).toBe(node1.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n  \n  \n      it('Prepends a path to a path', function(done) {\n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1])\n          .then(function() {\n            DrawingSvc.addNodeToDrawing(drawing, 0, node2)\n              .then(function(path) {\n                expect(path.length).toBe(3);\n            \n                expect(node0.index).toBe(1);\n                expect(path[1].lat()).toBe(node0.lat);\n                expect(path[1].lng()).toBe(node0.lng);\n            \n                expect(node1.index).toBe(2);\n                expect(path[2].lat()).toBe(node1.lat);\n                expect(path[2].lng()).toBe(node1.lng);\n            \n                expect(node2.index).toBe(0);\n                expect(path[0].lat()).toBe(node2.lat);\n                expect(path[0].lng()).toBe(node2.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n    });\n    \n    describe('Change existing ·', function() {\n      it('Moves orphan node', function(done) {\n        DrawingSvc.addNodeToDrawing(drawing, 0, node0)\n          .then(function() {\n            DrawingSvc.changeNodeOfDrawing(drawing, 0, {\n              lat: latLng.lat(),\n              lng: latLng.lng()\n            })\n              .then(function(path) {\n                expect(path.length).toBe(1);\n            \n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n                expect(latLng.lat()).toBe(node0.lat);\n                expect(latLng.lng()).toBe(node0.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n    \n    \n      it('Moves last node', function(done) {\n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1, node2])\n          .then(function() {\n            DrawingSvc.changeNodeOfDrawing(drawing, 2, {\n              lat: latLng.lat(),\n              lng: latLng.lng()\n            })\n              .then(function(path) {\n                expect(path.length).toBe(3);\n            \n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n            \n                expect(node1.index).toBe(1);\n                expect(path[1].lat()).toBe(node1.lat);\n                expect(path[1].lng()).toBe(node1.lng);\n            \n                expect(drawing.nodes).not.toContain(node2);\n                node2 = drawing.nodes[2];\n                \n                expect(node2.index).toBe(2);\n                expect(path[2].lat()).toBe(node2.lat);\n                expect(path[2].lng()).toBe(node2.lng);\n                expect(latLng.lat()).toBe(node2.lat);\n                expect(latLng.lng()).toBe(node2.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n    \n    \n      it('Moves first node', function(done) {\n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1, node2])\n          .then(function() {\n            DrawingSvc.changeNodeOfDrawing(drawing, 0, {\n              lat: latLng.lat(),\n              lng: latLng.lng()\n            })\n              .then(function(path) {\n                expect(path.length).toBe(3);\n            \n                expect(drawing.nodes).not.toContain(node0);\n                node0 = drawing.nodes[0];\n                \n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n                expect(latLng.lat()).toBe(node0.lat);\n                expect(latLng.lng()).toBe(node0.lng);\n            \n                expect(node1.index).toBe(1);\n                expect(path[1].lat()).toBe(node1.lat);\n                expect(path[1].lng()).toBe(node1.lng);\n            \n                expect(node2.index).toBe(2);\n                expect(path[2].lat()).toBe(node2.lat);\n                expect(path[2].lng()).toBe(node2.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n\n\n      it('Moves middle node', function(done) {\n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1, node2])\n          .then(function(path) {\n            DrawingSvc.changeNodeOfDrawing(drawing, 1, {\n              lat: latLng.lat(),\n              lng: latLng.lng()\n            })\n              .then(function(path) {\n                expect(path.length).toBe(3);\n            \n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n            \n                expect(drawing.nodes).not.toContain(node1);\n                \n                node1 = drawing.nodes[1];\n                expect(node1.index).toBe(1);\n                expect(path[1].lat()).toBe(node1.lat);\n                expect(path[1].lng()).toBe(node1.lng);\n                expect(latLng.lat()).toBe(node1.lat);\n                expect(latLng.lng()).toBe(node1.lng);\n            \n                expect(node2.index).toBe(2);\n                expect(path[2].lat()).toBe(node2.lat);\n                expect(path[2].lng()).toBe(node2.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n    });\n    \n    describe('Removal ·', function() {\n      it('Removes orphan node', function(done) {\n        DrawingSvc.addNodeToDrawing(drawing, 0, node0)\n          .then(function() {\n            DrawingSvc.removeNodeFromDrawing(drawing, 0, 1)\n              .then(function(path) {\n                expect(path.length).toBe(0);\n                expect(drawing.nodes.length).toBe(0);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n    \n    \n      it('Removes first node', function(done) {\n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1, node2])\n          .then(function() {\n            DrawingSvc.removeNodeFromDrawing(drawing, 0, 1)\n              .then(function(path) {\n                expect(path.length).toBe(2);\n            \n                expect(drawing.nodes.length).toBe(2);\n                \n                expect(drawing.nodes[0]).toBe(node1);\n                expect(node1.index).toBe(0);\n                expect(path[0].lat()).toBe(node1.lat);\n                expect(path[0].lng()).toBe(node1.lng);\n            \n                expect(drawing.nodes[1]).toBe(node2);\n                expect(node2.index).toBe(1);\n                expect(path[1].lat()).toBe(node2.lat);\n                expect(path[1].lng()).toBe(node2.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n\n\n      it('Removes middle node', function(done) {\n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1, node2])\n          .then(function(path) {\n            DrawingSvc.removeNodeFromDrawing(drawing, 1, 1)\n              .then(function(path) {\n                expect(path.length).toBe(2);\n            \n                expect(drawing.nodes.length).toBe(2);\n                \n                expect(drawing.nodes[0]).toBe(node0);\n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n            \n                expect(drawing.nodes[1]).toBe(node2);\n                expect(node2.index).toBe(1);\n                expect(path[1].lat()).toBe(node2.lat);\n                expect(path[1].lng()).toBe(node2.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n\n\n      it('Removes last node', function(done) {\n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1, node2])\n          .then(function() {\n            DrawingSvc.removeNodeFromDrawing(drawing, 2, 1)\n              .then(function(path) {\n                expect(path.length).toBe(2);\n            \n                expect(drawing.nodes.length).toBe(2);\n                \n                expect(drawing.nodes[0]).toBe(node0);\n                expect(node0.index).toBe(0);\n                expect(path[0].lat()).toBe(node0.lat);\n                expect(path[0].lng()).toBe(node0.lng);\n            \n                expect(drawing.nodes[1]).toBe(node1);\n                expect(node1.index).toBe(1);\n                expect(path[1].lat()).toBe(node1.lat);\n                expect(path[1].lng()).toBe(node1.lng);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n      \n      \n      it('Removes all nodes', function(done) {\n        DrawingSvc.addNodesToDrawing(drawing, 0, [node0, node1, node2])\n          .then(function(path) {\n            DrawingSvc.removeNodesFromDrawing(drawing, 0, 3)\n              .then(function(path) {\n                expect(path.length).toBe(0);\n            \n                expect(drawing.nodes.length).toBe(0);\n              })\n              .finally(done);\n          });\n    \n        $timeout.flush();\n      });\n      \n    });\n  });\n});\n"],"sourceRoot":"/source/"}