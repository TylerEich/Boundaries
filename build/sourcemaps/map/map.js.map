{"version":3,"file":"map/map.js","names":[],"mappings":"","sources":["map/map.js"],"sourcesContent":["/* global google */\n\nangular.module('bndry.map', ['ngStorage'])\n\n// MapSvc encapsulates google.maps, making it easier to mock for tests.\n.service('MapSvc', function($rootScope) {\n  function makeIcon(color) {\n    return {\n      path: self.SymbolPath.CIRCLE,\n      scale: 10,\n      strokeColor: color,\n      strokeOpacity: 1,\n      strokeWeight: 2.5\n    };\n  }\n\n  function makeMarkerOptions(lat, lng, color) {\n    var clickable = false,\n      cursor = 'pointer',\n      draggable = false;\n    return {\n      clickable: clickable,\n      crossOnDrag: false,\n      cursor: cursor,\n      draggable: draggable,\n      flat: true,\n      icon: makeIcon(color),\n      map: self.map,\n      position: new self.LatLng(lat, lng)\n    };\n  }\n\n  function addListener(eventName) {\n    self.map.addListener(eventName, function(mouseEvent) {\n      $rootScope.$broadcast('map:' + eventName, mouseEvent);\n    });\n  }\n\n  var self = this;\n\n  angular.extend(self, google.maps);\n  self.map = new self.Map(document.getElementById('map_canvas'));\n  self.placesSvc = new self.places.PlacesService(self.map);\n  self.autocompleteSvc = new self.places.AutocompleteService();\n\n  var events = ['bounds_changed', 'center_changed', 'click', 'dblclick', 'drag', 'dragend', 'dragstart', 'heading_changed', 'idle', 'maptypeid_changed', 'mousemove', 'mouseout', 'mouseover', 'projection_changed', 'resize', 'rightclick', 'tilesloaded', 'tilt_changed', 'zoom_changed'];\n\n  events.forEach(addListener);\n})\n\n// Map controller, mainly for event handling\n.controller('MapCtrl', function($scope, $rootScope, $localStorage, MapSvc) {\n  // Default values for lat, lng, zoom\n  $localStorage.$default({\n    lat: 0,\n    lng: 0,\n    zoom: 10,\n    mapTypeId: MapSvc.MapTypeId.ROADMAP,\n    style: [{\n      'stylers': [{\n        'visibility': 'off'\n      }]\n    }, {\n      'featureType': 'landscape',\n      'stylers': [{\n        'visibility': 'on'\n      }, {\n        'color': '#ffffff'\n      }]\n    }, {\n      'featureType': 'road',\n      'stylers': [{\n        'visibility': 'on'\n      }]\n    }, {\n      'elementType': 'geometry.fill',\n      'stylers': [{\n        'color': '#ffffff'\n      }]\n    }, {\n      'featureType': 'road',\n      'elementType': 'geometry.stroke',\n      'stylers': [{\n        'color': '#808080'\n      }]\n    }, {\n      'elementType': 'labels.text.stroke',\n      'stylers': [{\n        'color': '#ffffff'\n      }]\n    }, {\n      'elementType': 'labels.text.fill',\n      'stylers': [{\n        'color': '#000000'\n      }]\n    }, {\n      'featureType': 'water',\n      'stylers': [{\n        'visibility': 'on'\n      }, {\n        'color': '#40bfbf'\n      }]\n    }, {\n      'featureType': 'water',\n      'elementType': 'labels.text.stroke',\n      'stylers': [{\n        'color': '#ffffff'\n      }]\n    }, {\n      'featureType': 'road.local',\n      'elementType': 'geometry',\n      'stylers': [{\n        'color': '#dfdfdf'\n      }]\n    }, {\n      'featureType': 'road.local',\n      'elementType': 'geometry.stroke',\n      'stylers': [{\n        'visibility': 'off'\n      }]\n    }, {\n      'featureType': 'landscape.man_made',\n      'stylers': [{\n        'visibility': 'off'\n      }]\n    }]\n  });\n  \n  $scope.$on('map:idle', function() {\n    var center = MapSvc.map.getCenter();\n    var zoom = MapSvc.map.getZoom();\n\n    $localStorage.lat = center.lat();\n    $localStorage.lng = center.lng();\n    $localStorage.zoom = zoom;\n  });\n  $scope.$on('map:maptypeid_changed', function() {\n    var mapTypeId = MapSvc.map.getMapTypeId();\n\n    $localStorage.mapTypeId = mapTypeId;\n  });\n\n  // Initialize map\n  var options = {\n    center: new MapSvc.LatLng($localStorage.lat, $localStorage.lng),\n    disableDefaultUI: true,\n    disableDoubleClickZoom: true,\n    draggableCursor: 'crosshair',\n    draggingCursor: 'move',\n    mapTypeId: $localStorage.mapTypeId,\n    mapTypeControl: true,\n    mapTypeControlOptions: {\n      mapTypeIds: [MapSvc.MapTypeId.ROADMAP, MapSvc.MapTypeId.HYBRID, 'custom']\n    },\n    scaleControl: true,\n    zoom: $localStorage.zoom\n  };\n\n  MapSvc.map.setOptions(options);\n  \n  var customMapStyle = new MapSvc.StyledMapType($localStorage.style, {\n    name: 'Custom'\n  });\n  MapSvc.map.mapTypes.set('custom', customMapStyle);\n})\n  .controller('MapActionCtrl', function($scope, MapSvc) {\n    $scope.setMapTypeId = function(mapTypeId) {\n      if (mapTypeId in MapSvc.MapTypeId) {\n        console.log(mapTypeId, 'in MapSvc.mapTypeId');\n        mapTypeId = MapSvc.MapTypeId[mapTypeId];\n      }\n      \n      MapSvc.map.setMapTypeId(mapTypeId);\n    };\n  });\n"],"sourceRoot":"/source/"}