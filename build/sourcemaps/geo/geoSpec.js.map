{"version":3,"file":"geo/geoSpec.js","names":[],"mappings":"","sources":["geo/geoSpec.js"],"sourcesContent":["describe('Geo', function() {\n  var $timeout, GeolocationSvc, GeocodeSvc;\n\n  var MockMapSvc = {\n    '__gjsload__': function() {},\n    'Animation': {\n      'BOUNCE': 1,\n      'DROP': 2,\n      'k': 3,\n      'j': 4\n    },\n    'Circle': function() {},\n    'ControlPosition': {\n      'TOP_LEFT': 1,\n      'TOP_CENTER': 2,\n      'TOP': 2,\n      'TOP_RIGHT': 3,\n      'LEFT_CENTER': 4,\n      'LEFT_TOP': 5,\n      'LEFT': 5,\n      'LEFT_BOTTOM': 6,\n      'RIGHT_TOP': 7,\n      'RIGHT': 7,\n      'RIGHT_CENTER': 8,\n      'RIGHT_BOTTOM': 9,\n      'BOTTOM_LEFT': 10,\n      'BOTTOM_CENTER': 11,\n      'BOTTOM': 11,\n      'BOTTOM_RIGHT': 12,\n      'CENTER': 13\n    },\n    'Data': function() {},\n    'GroundOverlay': function() {},\n    'ImageMapType': function() {},\n    'InfoWindow': function() {},\n    'LatLng': function() {},\n    'LatLngBounds': function() {},\n    'MVCArray': function() {},\n    'MVCObject': function() {},\n    'Map': function() {},\n    'MapTypeControlStyle': {\n      'DEFAULT': 0,\n      'HORIZONTAL_BAR': 1,\n      'DROPDOWN_MENU': 2\n    },\n    'MapTypeId': {\n      'ROADMAP': 'roadmap',\n      'SATELLITE': 'satellite',\n      'HYBRID': 'hybrid',\n      'TERRAIN': 'terrain'\n    },\n    'MapTypeRegistry': function() {},\n    'Marker': function() {},\n    'MarkerImage': function() {},\n    'NavigationControlStyle': {\n      'DEFAULT': 0,\n      'SMALL': 1,\n      'ANDROID': 2,\n      'ZOOM_PAN': 3,\n      'Dn': 4,\n      'Xm': 5\n    },\n    'OverlayView': function() {},\n    'Point': function() {},\n    'Polygon': function() {},\n    'Polyline': function() {},\n    'Rectangle': function() {},\n    'ScaleControlStyle': {\n      'DEFAULT': 0\n    },\n    'Size': function() {},\n    'StrokePosition': {\n      'CENTER': 0,\n      'INSIDE': 1,\n      'OUTSIDE': 2\n    },\n    'SymbolPath': {\n      'CIRCLE': 0,\n      'FORWARD_CLOSED_ARROW': 1,\n      'FORWARD_OPEN_ARROW': 2,\n      'BACKWARD_CLOSED_ARROW': 3,\n      'BACKWARD_OPEN_ARROW': 4\n    },\n    'ZoomControlStyle': {\n      'DEFAULT': 0,\n      'SMALL': 1,\n      'LARGE': 2,\n      'Xm': 3\n    },\n    'event': {\n      'Re': false,\n      'Zd': {},\n      'addListener': function() {},\n      'yf': function() {},\n      'removeListener': function() {},\n      'clearListeners': function() {},\n      'clearInstanceListeners': function() {},\n      'trigger': function() {},\n      'addDomListener': function() {},\n      'addDomListenerOnce': function() {},\n      'ca': function() {},\n      'bind': function() {},\n      'addListenerOnce': function() {},\n      'forward': function() {},\n      'Ua': function() {},\n      'bi': function() {},\n      'Qj': function() {}\n    },\n    'BicyclingLayer': function() {},\n    'DirectionsRenderer': function() {},\n    'DirectionsService': function() {},\n    'DirectionsStatus': {\n      'OK': 'OK',\n      'UNKNOWN_ERROR': 'UNKNOWN_ERROR',\n      'OVER_QUERY_LIMIT': 'OVER_QUERY_LIMIT',\n      'REQUEST_DENIED': 'REQUEST_DENIED',\n      'INVALID_REQUEST': 'INVALID_REQUEST',\n      'ZERO_RESULTS': 'ZERO_RESULTS',\n      'MAX_WAYPOINTS_EXCEEDED': 'MAX_WAYPOINTS_EXCEEDED',\n      'NOT_FOUND': 'NOT_FOUND'\n    },\n    'DirectionsTravelMode': {\n      'DRIVING': 'DRIVING',\n      'WALKING': 'WALKING',\n      'BICYCLING': 'BICYCLING',\n      'TRANSIT': 'TRANSIT'\n    },\n    'DirectionsUnitSystem': {\n      'METRIC': 0,\n      'IMPERIAL': 1\n    },\n    'DistanceMatrixService': function() {},\n    'DistanceMatrixStatus': {\n      'OK': 'OK',\n      'INVALID_REQUEST': 'INVALID_REQUEST',\n      'OVER_QUERY_LIMIT': 'OVER_QUERY_LIMIT',\n      'REQUEST_DENIED': 'REQUEST_DENIED',\n      'UNKNOWN_ERROR': 'UNKNOWN_ERROR',\n      'MAX_ELEMENTS_EXCEEDED': 'MAX_ELEMENTS_EXCEEDED',\n      'MAX_DIMENSIONS_EXCEEDED': 'MAX_DIMENSIONS_EXCEEDED'\n    },\n    'DistanceMatrixElementStatus': {\n      'OK': 'OK',\n      'NOT_FOUND': 'NOT_FOUND',\n      'ZERO_RESULTS': 'ZERO_RESULTS'\n    },\n    'ElevationService': function() {},\n    'ElevationStatus': {\n      'OK': 'OK',\n      'UNKNOWN_ERROR': 'UNKNOWN_ERROR',\n      'OVER_QUERY_LIMIT': 'OVER_QUERY_LIMIT',\n      'REQUEST_DENIED': 'REQUEST_DENIED',\n      'INVALID_REQUEST': 'INVALID_REQUEST',\n      'Bn': 'DATA_NOT_AVAILABLE'\n    },\n    'FusionTablesLayer': function() {},\n    'Geocoder': function() {},\n    'GeocoderLocationType': {\n      'ROOFTOP': 'ROOFTOP',\n      'RANGE_INTERPOLATED': 'RANGE_INTERPOLATED',\n      'GEOMETRIC_CENTER': 'GEOMETRIC_CENTER',\n      'APPROXIMATE': 'APPROXIMATE'\n    },\n    'GeocoderStatus': {\n      'OK': 'OK',\n      'UNKNOWN_ERROR': 'UNKNOWN_ERROR',\n      'OVER_QUERY_LIMIT': 'OVER_QUERY_LIMIT',\n      'REQUEST_DENIED': 'REQUEST_DENIED',\n      'INVALID_REQUEST': 'INVALID_REQUEST',\n      'ZERO_RESULTS': 'ZERO_RESULTS',\n      'ERROR': 'ERROR'\n    },\n    'KmlLayer': function() {},\n    'KmlLayerStatus': {\n      'UNKNOWN': 'UNKNOWN',\n      'OK': 'OK',\n      'INVALID_REQUEST': 'INVALID_REQUEST',\n      'DOCUMENT_NOT_FOUND': 'DOCUMENT_NOT_FOUND',\n      'FETCH_ERROR': 'FETCH_ERROR',\n      'INVALID_DOCUMENT': 'INVALID_DOCUMENT',\n      'DOCUMENT_TOO_LARGE': 'DOCUMENT_TOO_LARGE',\n      'LIMITS_EXCEEDED': 'LIMITS_EXECEEDED',\n      'TIMED_OUT': 'TIMED_OUT'\n    },\n    'MaxZoomService': function() {},\n    'MaxZoomStatus': {\n      'OK': 'OK',\n      'ERROR': 'ERROR'\n    },\n    'StreetViewCoverageLayer': function() {},\n    'StreetViewPanorama': function() {},\n    'StreetViewService': function() {},\n    'StreetViewStatus': {\n      'OK': 'OK',\n      'UNKNOWN_ERROR': 'UNKNOWN_ERROR',\n      'ZERO_RESULTS': 'ZERO_RESULTS'\n    },\n    'StyledMapType': function() {},\n    'TrafficLayer': function() {},\n    'TransitLayer': function() {},\n    'TravelMode': {\n      'DRIVING': 'DRIVING',\n      'WALKING': 'WALKING',\n      'BICYCLING': 'BICYCLING',\n      'TRANSIT': 'TRANSIT'\n    },\n    'UnitSystem': {\n      'METRIC': 0,\n      'IMPERIAL': 1\n    },\n    'version': '3.16.8',\n    'map': {}\n  };\n\n  beforeEach(module('bndry.geo', function($provide) {\n    $provide.value('MapSvc', MockMapSvc);\n  }));\n  beforeEach(inject(function(_$timeout_, _GeocodeSvc_, _GeolocationSvc_) {\n    $timeout = _$timeout_;\n    GeocodeSvc = _GeocodeSvc_;\n    GeolocationSvc = _GeolocationSvc_;\n  }));\n\n  it('Returns location data', function() {\n    GeolocationSvc.getLocation()\n      .then(function(value) {\n        expect(typeof value).toBe('object');\n        expect(value).toBeTruthy();\n      });\n  });\n});\n"],"sourceRoot":"/source/"}