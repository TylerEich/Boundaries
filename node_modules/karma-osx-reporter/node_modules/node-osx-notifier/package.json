{
  "name": "node-osx-notifier",
  "description": "A NodeJS Server for sending notifications to OSX Mountain Lion's Notification Center",
  "version": "0.1.0",
  "homepage": "https://github.com/azoff/node-osx-notifier",
  "author": {
    "name": "Jonathan Azoff",
    "email": "jon@azoffdesign.com",
    "url": "http://azoffdesign.com"
  },
  "dependencies": {
    "express": "3.0.x"
  },
  "repository": {
    "type": "git",
    "url": "git://git@github.com:azoff/node-osx-notifier.git"
  },
  "bugs": {
    "url": "https://github.com/azoff/node-osx-notifier/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/azoff/node-osx-notifier/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/node-osx-notifier",
  "engines": {
    "node": ">= 0.8.0"
  },
  "preferGlobal": "true",
  "bin": {
    "node-osx-notifier": "lib/node-osx-notifier.js"
  },
  "keywords": [
    "osx"
  ],
  "readme": "node-osx-notifier\n===========================\nA [NodeJS](http://nodejs.org) Server for sending notifications to OSX Mountain Lion's\n[Notification Center](http://www.macworld.com/article/1165411/mountain_lion_hands_on_with_notification_center.html).\n\nSynopsis\n--------\nOSX Mountain Lion comes packaged with a built-in notification center. For whatever reason, [Apple sandboxed the\nnotification center API](http://forums.macrumors.com/showthread.php?t=1403807) to apps hosted in its App Store. The end\nresult? A potentially useful API shackled to Apple's ecosystem.\n\nThankfully, [Eloy Durán](https://github.com/alloy) put together a\n[set of sweet osx apps](https://github.com/alloy/terminal-notifier) that allow terminal access to the sandboxed API.\n**node-osx-notifier** wraps these apps with a simple [express](https://github.com/visionmedia/express) server, exposing\nan HTTP interface to the closed API.\n\nIt's not perfect, and the implementor will quickly notice its limitations. However, it's a start and any pull requests\nare accepted and encouraged!\n\nInstallation\n------------\nThe following command will install the notification server. Use `-g` to install the server as a global binary.\n\n```sh\n[sudo] npm install [-g] node-osx-notifier\n```\n\nRunning The Server\n------------------\nRunning the server is easy peasy. If you installed the server globally, then starting the server is as easy as:\n\n```sh\nnode-osx-notifier [port] [host]\n```\n\nThe port and host will default to `1337` and `localhost` respectively.\n\nTesting The Server\n------------------\nYou can then test that the server is running correctly by making a request to it. The simplest request uses the\nquerystring over HTTP GET:\n\n```sh\ncurl \"http://localhost:1337/info?message=test\"\n```\n\n```json\n{\n  \"status\": \"* Notification delivered.\"\n}\n```\n\nYou can also use the JSON interface to POST the same content to the server:\n\n```sh\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"message\":\"test\"}' \"http://localhost:1338/info\"\n```\n\n```json\n{\n  \"status\": \"* Notification delivered.\"\n}\n```\n\nThe HTTP API\n------------\nFor starters, you want to pick from one of three notification types. The notification types are designated by the path\nof the server request. Each notification type changes the icon and section in the notification center:\n\n* _info_ `http://localhost:1337/info` used for basic notifications\n   * ![info screenshot](http://f.cl.ly/items/0P3i301J281x1A0Q1L46/Screen%20Shot%202012-08-30%20at%201.19.18%20AM.png)\n* _pass_ `http://localhost:1337/pass` used for showing that a job has passed\n   * ![info screenshot](http://f.cl.ly/items/0Q0A3b2S0v0Q2E3l0B0q/Screen%20Shot%202012-08-30%20at%201.21.03%20AM.png)\n* _fail_ `http://localhost:1337/fail` used for showing that a job has failed\n   * ![info screenshot](http://f.cl.ly/items/1H3v2H173A0r3a2F3l0x/Screen%20Shot%202012-08-30%20at%201.19.57%20AM.png)\n\nIn addition, you will also need to pass parameters (as JSON POST-data or a querystring) that tells the server what to\ndo for a given notification type. Since the server acts as a wrapper, these parameters match\n[the command-line options](https://github.com/alloy/terminal-notifier#options) defined by the underlying apps. For\ncompleteness, those parameters are outlined below:\n\nAt a minimum, you have to specify either the `-message` , the `-remove`\noption or the `-list` option.\n\n-------------------------------------------------------------------------------\n\n`-message VALUE`  **[required]**\n\nThe message body of the notification.\n\n-------------------------------------------------------------------------------\n\n`-title VALUE`\n\nThe title of the notification. This defaults to ‘Terminal’.\n\n-------------------------------------------------------------------------------\n\n`-subtitle VALUE`\n\nThe subtitle of the notification.\n\n-------------------------------------------------------------------------------\n\n`-group ID`\n\nSpecifies the ‘group’ a notification belongs to. For any ‘group’ only _one_\nnotification will ever be shown, replacing previously posted notifications.\n\nA notification can be explicitely removed with the `-remove` option, describe\nbelow.\n\nExamples are:\n\n* The sender’s name to scope the notifications by tool.\n* The sender’s process ID to scope the notifications by a unique process.\n* The current working directory to scope notifications by project.\n\n-------------------------------------------------------------------------------\n\n`-remove ID`  **[required]**\n\nRemoves a notification that was previously sent with the specified ‘group’ ID,\nif one exists. If used with the special group \"ALL\", all message are removed.\n\n-------------------------------------------------------------------------------\n\n`-list ID` **[required]**\n\nLists details about the specified ‘group’ ID. If used with the special group\n\"ALL\", details about all currently active  messages are displayed.\n\nThe output of this command is tab-separated, which makes it easy to parse.\n\n-------------------------------------------------------------------------------\n\n`-activate ID`\n\nSpecifies which application should be activated when the user clicks the\nnotification.\n\nYou can find the bundle identifier of an application in its `Info.plist` file\n_inside_ the application bundle.\n\nExamples are:\n\n* `com.apple.Terminal` to activate Terminal.app\n* `com.apple.Safari` to activate Safari.app\n\n-------------------------------------------------------------------------------\n\n`-open URL`\n\nSpecifies a resource to be opened when the user clicks the notification. This\ncan be a web or file URL, or any custom URL scheme.\n\n-------------------------------------------------------------------------------\n\n`-execute COMMAND`\n\nSpecifies a shell command to run when the user clicks the notification.\n\nLicence\n-------\nThis project is dual licensed under the [MIT](https://github.com/azoff/node-osx-notifier/blob/master/LICENSE-MIT)\nlicense and defers to [any licensing defined by the underlying apps](https://github.com/alloy/terminal-notifier).",
  "readmeFilename": "README.md",
  "_id": "node-osx-notifier@0.1.0",
  "_shasum": "fce01fb577a9cf8aa8ba72ec600a47363b0ccdeb",
  "_from": "node-osx-notifier@>= 0.1.0",
  "_resolved": "https://registry.npmjs.org/node-osx-notifier/-/node-osx-notifier-0.1.0.tgz"
}
