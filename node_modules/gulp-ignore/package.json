{
  "name": "gulp-ignore",
  "description": "Include or exclude gulp files from the stream based on a condition",
  "version": "1.2.0",
  "homepage": "https://github.com/robrich/gulp-ignore",
  "repository": {
    "type": "git",
    "url": "git://github.com/robrich/gulp-ignore.git"
  },
  "author": {
    "name": "Rob Richardson",
    "url": "http://robrich.org/"
  },
  "main": "./index.js",
  "keywords": [
    "gulpplugin",
    "filter",
    "minimatch",
    "include",
    "exclude",
    "gulp-filter"
  ],
  "dependencies": {
    "through2": "^0.5.1",
    "gulp-match": "^0.2.0"
  },
  "devDependencies": {
    "jshint": "^2.5.2",
    "mocha": "^1.20.1",
    "should": "^4.0.4"
  },
  "scripts": {
    "test": "mocha && jshint ./*.js && jshint ./test/*.js"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/robrich/gulp-ignore/raw/master/LICENSE"
    }
  ],
  "readme": "gulp-ignore ![status](https://secure.travis-ci.org/robrich/gulp-ignore.png?branch=master)\r\n===========\r\n\r\nInclude or exclude [gulp](https://github.com/gulpjs/gulp) files from the stream based on a condition\r\n\r\nUsage\r\n\r\n1: Exclude things from the stream\r\n\r\n**Exclude things from entering the stream**\r\n\r\n![][glob]\r\n\r\n```javascript\r\nvar uglify = require('gulp-uglify');\r\n\r\ngulp.task('task', function() {\r\n  gulp.src(['./*.js', '!./node_modules/**'])\r\n    .pipe(uglify())\r\n    .pipe(gulp.dest('./dist/'));\r\n});\r\n```\r\n\r\nGrab all JavaScript files that aren't in the node_modules folder, uglify them, and write them.\r\nThis is fastest because nothing in node_modules ever leaves `gulp.src()`\r\n\r\n\r\n2: Remove things from the stream\r\n\r\n**Remove from here on**\r\n\r\n![][exclude]\r\n\r\n```javascript\r\nvar gulpIgnore = require('gulp-ignore');\r\nvar uglify = require('gulp-uglify');\r\nvar jshint = require('gulp-jshint');\r\n\r\nvar condition = './gulpfile.js';\r\n\r\ngulp.task('task', function() {\r\n  gulp.src('./*.js')\r\n    .pipe(jshint())\r\n    .pipe(gulpIgnore.exclude(condition))\r\n    .pipe(uglify())\r\n    .pipe(gulp.dest('./dist/'));\r\n});\r\n```\r\n\r\nRun JSHint on everything, remove gulpfile from the stream, then uglify and write everything else.\r\n\r\n3: Filter only matching things\r\n\r\n**Include from here on**\r\n\r\n![][include]\r\n\r\n```javascript\r\nvar gulpIgnore = require('gulp-ignore');\r\nvar uglify = require('gulp-uglify');\r\nvar jshint = require('gulp-jshint');\r\n\r\nvar condition = './public/**.js';\r\n\r\ngulp.task('task', function() {\r\n  gulp.src('./*.js')\r\n    .pipe(jshint())\r\n    .pipe(gulpIgnore.include(condition))\r\n    .pipe(uglify())\r\n    .pipe(gulp.dest('./dist/'));\r\n});\r\n```\r\n\r\nRun JSHint on everything, filter to include only files from in the public folder, then uglify and write them.\r\n\r\n\r\n4: Conditionally filter content, include everything down-stream\r\n\r\n**Condition**\r\n\r\n![][condition]\r\n\r\n```javascript\r\nvar gulpif = require('gulp-if');\r\nvar uglify = require('gulp-uglify');\r\n\r\nvar condition = true; // TODO: add business logic\r\n\r\ngulp.task('task', function() {\r\n  gulp.src('./src/*.js')\r\n    .pipe(gulpif(condition, uglify()))\r\n    .pipe(gulp.dest('./dist/'));\r\n});\r\n```\r\nOnly uglify the content if the condition is true, but send all the files to the dist folder\r\n\r\n\r\nAPI\r\n---\r\n\r\n### exclude(condition)\r\n\r\nExclude files whose `file.path` matches, include everything else\r\n\r\n### include(condition)\r\n\r\nInclude files whose `file.path` matches, exclude everything else\r\n\r\n### condition\r\n\r\nType: `boolean` or [`stat`](http://nodejs.org/api/fs.html#fs_class_fs_stats) object or `function` that takes in a vinyl file and returns a boolean or `RegularExpression` that works on the `file.path`\r\n\r\nThe condition parameter is any of the conditions supported by [gulp-match](https://github.com/robrich/gulp-match).  The `file.path` is passed into `gulp-match`.\r\n\r\nIf a function is given, then the function is passed a vinyl `file`. The function should return a `boolean`.\r\n\r\n\r\nLICENSE\r\n-------\r\n\r\n(MIT License)\r\n\r\nCopyright (c) 2014 [Richardson & Sons, LLC](http://richardsonandsons.com/)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining\r\na copy of this software and associated documentation files (the\r\n\"Software\"), to deal in the Software without restriction, including\r\nwithout limitation the rights to use, copy, modify, merge, publish,\r\ndistribute, sublicense, and/or sell copies of the Software, and to\r\npermit persons to whom the Software is furnished to do so, subject to\r\nthe following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be\r\nincluded in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n[condition]: https://rawgithub.com/robrich/gulp-ignore/master/img/condition.svg\r\n[ternary]: https://rawgithub.com/robrich/gulp-ignore/master/img/ternary.svg\r\n[exclude]: https://rawgithub.com/robrich/gulp-ignore/master/img/exclude.svg\r\n[include]: https://rawgithub.com/robrich/gulp-ignore/master/img/include.svg\r\n[glob]: https://rawgithub.com/robrich/gulp-ignore/master/img/glob.svg\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/robrich/gulp-ignore/issues"
  },
  "_id": "gulp-ignore@1.2.0",
  "_shasum": "42c2a42b58c5d71f41ebab7d4011815b814dd0bd",
  "_from": "gulp-ignore@",
  "_resolved": "https://registry.npmjs.org/gulp-ignore/-/gulp-ignore-1.2.0.tgz"
}
